name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff social_scrubber/ tests/ examples/
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff social_scrubber/ tests/ examples/
    
    - name: Type checking (mypy)
      run: |
        mypy social_scrubber/ --ignore-missing-imports --no-strict-optional
    
    - name: Linting (flake8)
      run: |
        flake8 social_scrubber/ tests/ examples/ --count --statistics
    
    - name: Security check (bandit)
      run: |
        bandit -r social_scrubber/ -f json
      continue-on-error: true  # Don't fail CI on security warnings
    
    - name: Run tests
      run: |
        python -m pytest tests/ --tb=short -v --cov=social_scrubber --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'  # Only upload once
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-test:
    name: Build and Installation Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ["3.9", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Test package installation
      run: |
        python -c "import social_scrubber; print(f'Successfully imported social_scrubber v{social_scrubber.__version__}')"
    
    - name: Test CLI help command
      run: |
        python -m social_scrubber --help
    
    - name: Test package build
      run: |
        python setup.py check
        python setup.py sdist bdist_wheel
    
    - name: Test executable script (Unix only)
      if: runner.os != 'Windows'
      run: |
        chmod +x social-scrubber
        ./social-scrubber --help

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, build-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Create test environment file
      run: |
        cp .env.example .env.test
        echo "DRY_RUN=true" >> .env.test
        echo "MAX_POSTS_PER_SCRUB=1" >> .env.test
    
    - name: Test configuration loading
      run: |
        python -c "
        import os
        os.environ['DRY_RUN'] = 'true'
        from social_scrubber.config import Config
        config = Config.from_env()
        print(f'Config loaded successfully: dry_run={config.scrub.dry_run}')
        assert config.scrub.dry_run == True
        print('✅ Configuration test passed')
        "
    
    - name: Test platform initialization
      run: |
        python -c "
        from social_scrubber.config import Config
        from social_scrubber.platforms.bluesky import BlueskyPlatform
        from social_scrubber.platforms.mastodon import MastodonPlatform
        config = Config.from_env()
        bluesky = BlueskyPlatform(config.bluesky)
        mastodon = MastodonPlatform(config.mastodon)
        print('✅ Platform initialization test passed')
        "

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
    
    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json || echo "⚠️ Security vulnerabilities found (check output above)"
      continue-on-error: true
